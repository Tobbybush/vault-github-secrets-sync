name: Sync Secrets from Vault

on:
  push:
    branches:
      - dev
  workflow_dispatch: # Allows manual trigger

jobs:
  sync-secrets:
    runs-on: ubuntu-latest
    env:
      VAULT_VERSION: "1.15.0"
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      GH_PAT: ${{ secrets.GH_PAT }}
      GITHUB_REPO: ${{ github.repository }}
      SECRET_PATH: "kvV2/smart-store/frontend/dev"

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Verify Vault Token
        shell: pwsh
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
        run: |
          & "vault.exe" token lookup -format=json | & "jq.exe" '.data'

      # Step 2: Get Secrets from Vault
      - name: Get Secrets from Vault
        id: vault-secrets
        uses: hashicorp/vault-action@v2.4.1
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          path: ${{ env.SECRET_PATH }}
        continue-on-error: false

      # Step 3: Verify if Secrets were Retrieved
      - name: Verify Retrieved Secrets
        run: |
          echo "Checking if secrets were retrieved..."
          if [ -z "${{ steps.vault-secrets.outputs.secret }}" ]; then
            echo "Failed to retrieve secrets from Vault."
            exit 1
          else
            echo "Secrets retrieved successfully!"
          fi

      # Step 4: Save Secrets in JSON Format
      - name: Save Secrets as JSON
        run: |
          echo '${{ steps.vault-secrets.outputs.secret }}' > vault_secrets.json
          echo "Secrets saved to vault_secrets.json"

      # Step 5: Format JSON and Extract Secrets into Key=Value
      - name: Format and Extract Secrets
        run: |
          jq -r 'to_entries | .[] | if (.key | test("URL|password|path"; "i")) 
              then "\(.key)=\"\(.value)\"" 
              else "\(.key)=\(.value)" 
              end' vault_secrets.json > github_secrets.txt
          echo "Secrets formatted successfully."

      # Step 6: Print Extracted Secrets (Masked for Security)
      - name: Print Extracted Secrets (Safe Logging)
        run: |
          echo "Extracted Secrets:"
          cat github_secrets.txt | sed 's/=.*$/=********/'
          echo "Secrets printed (masked for security)."

      # Step 7: Create .env File
      - name: Create .env File
        if: github.ref == 'refs/heads/frontend_dev'
        run: |
          cp github_secrets.txt .env
          echo ".env file created successfully."

      # Step 8: Confirm Success
      - name: Confirm Success
        run: echo "Secrets sync completed successfully!"
