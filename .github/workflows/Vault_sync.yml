name: Sync Secrets from Vault

on:
  push:
    branches:
      - dev
  workflow_dispatch: # Allows manual trigger

jobs:
  sync-secrets:
    runs-on: ubuntu-latest
    env:
      VAULT_SKIP_VERIFY: true
      VAULT_VERSION: "1.15.0"
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      GH_PAT: ${{ secrets.GH_PAT }}
      GITHUB_REPO: ${{ github.repository }}
      SECRET_PATH: "kvV2/smart-store/frontend/dev"

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Install Vault
        run: |
          sudo snap install vault

      - name: Verify Vault Token
        shell: bash
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
        run: |
          vault token lookup -format=json -tls-skip-verify | jq '.data'

      - name: Fetch Secrets from Vault
        run: |
          set -e  # Stop script on error
          
          # Define the secret paths and output variable names
          declare -A SECRET_PATHS
          SECRET_PATHS["kvV2/Vault-POC/backend/dev"]="b_dev_has_changed"

          for SECRET_PATH in "${!SECRET_PATHS[@]}"; do
              echo "Processing Vault path: $SECRET_PATH"

              # Try to fetch secrets from Vault
              SECRET_DATA_JSON=$(vault kv get -format=json "$SECRET_PATH" | jq -r '.data.data')

              if [[ -z "$SECRET_DATA_JSON" ]]; then
                  echo "Error: Failed to fetch secrets from Vault at path '$SECRET_PATH'"
                  exit 1
              fi

              echo "Fetched data from $SECRET_PATH"
          done

      # # Step 2: Get Secrets from Vault
      # - name: Get Secrets from Vault
      #   id: vault-secrets
      #   uses: hashicorp/vault-action@v2.4.1
      #   with:
      #     url: ${{ secrets.VAULT_ADDR }}
      #     token: ${{ secrets.VAULT_TOKEN }}
      #     path: ${{ env.SECRET_PATH }}
      #   continue-on-error: false

      # - name: Import Secrets
      #   uses: hashicorp/vault-action
      #   with:
      #     url: ${{ secrets.VAULT_ADDR }}
      #     method: token
      #     token: ${{ secrets.VAULT_TOKEN }}
      #     # secret-path: ${{ secrets.VAULT_SECRET_PATH }}
      #     secrets: |
      #         "kvV2/smart-store/frontend/dev"

      # # Step 3: Verify if Secrets were Retrieved
      # - name: Verify Retrieved Secrets
      #   run: |
      #     echo "Checking if secrets were retrieved..."
      #     if [ -z "${{ steps.vault-secrets.outputs.secret }}" ]; then
      #       echo "Failed to retrieve secrets from Vault."
      #       exit 1
      #     else
      #       echo "Secrets retrieved successfully!"
      #     fi

      - name: Import Secrets
        id: vault-secrets  # Add an ID to reference this step
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          tlsSkipVerify: true
          method: token
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            kvV2/smart-store/frontend/dev accessKey | AWS_ACCESS_KEY_ID ;
            kvV2/smart-store/frontend/dev secretKey | AWS_SECRET_ACCESS_KEY
  
    # Step 3: Verify if Secrets were Retrieved
      - name: Verify Retrieved Secrets
        run: |
          echo "Checking if secrets were retrieved..."
          if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
          echo "Failed to retrieve secrets from Vault."
          exit 1
          else
          echo "Secrets retrieved successfully!"
          fi

      # Step 4: Save Secrets in JSON Format
      - name: Save Secrets as JSON
        run: |
          echo '${{ steps.vault-secrets.outputs.secret }}' > vault_secrets.json
          echo "Secrets saved to vault_secrets.json"

      # Step 5: Format JSON and Extract Secrets into Key=Value
      - name: Format and Extract Secrets
        run: |
          jq -r 'to_entries | .[] | if (.key | test("URL|password|path"; "i")) 
              then "\(.key)=\"\(.value)\"" 
              else "\(.key)=\(.value)" 
              end' vault_secrets.json > github_secrets.txt
          echo "Secrets formatted successfully."

      # Step 6: Print Extracted Secrets (Masked for Security)
      - name: Print Extracted Secrets (Safe Logging)
        run: |
          echo "Extracted Secrets:"
          cat github_secrets.txt | sed 's/=.*$/=********/'
          echo "Secrets printed (masked for security)."

      # Step 7: Create .env File
      - name: Create .env File
        if: github.ref == 'refs/heads/frontend_dev'
        run: |
          cp github_secrets.txt .env
          echo ".env file created successfully."

      # Step 8: Confirm Success
      - name: Confirm Success
        run: echo "Secrets sync completed successfully!"
