name: Vault-update

on:
  push:
    branches:
      - dev
  workflow_dispatch: # Allows manual trigger 

jobs:
  fetch-secrets:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y jq curl
          sudo snap install vault

      - name: Authenticate with Vault
        run: |
          echo "${{ secrets.VAULT_TOKEN }}" | vault login -tls-skip-verify -

      - name: Fetch and Merge Secrets from Vault
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        run: |
          set -e
          
          # Define Vault secret paths
          declare -A SECRET_PATHS
          SECRET_PATHS["kvV2/Vault-POC/backend/dev"]="ENV_DEV"

          # Fetch secrets
          for SECRET_PATH in "${!SECRET_PATHS[@]}"; do
            echo "Fetching secrets from: $SECRET_PATH"
            SECRET_DATA=$(vault kv get -format=json "$SECRET_PATH" | jq -r '.data.data')

            if [[ -z "$SECRET_DATA" ]]; then
              echo "Error: No data fetched from $SECRET_PATH"
              exit 1
            fi

            # Convert JSON to key=value format
            MERGED_SECRETS=""
            while IFS="=" read -r key value; do
              MERGED_SECRETS+="$key=$value"$'\n'
            done < <(echo "$SECRET_DATA" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"')

            echo "$MERGED_SECRETS" > "merged_secrets_${SECRET_PATH//\//_}.txt"
            echo "Secrets saved to merged_secrets_${SECRET_PATH//\//_}.txt"
          done

      - name: List Merged Secrets Files
        run: ls -l merged_secrets_*.txt

      - name: Check if Vault Secrets Changed
        id: check_vault
        run: |
          # Placeholder logic - adjust based on actual change detection method
          echo "b_dev_has_changed=true" >> "$GITHUB_ENV"

      - name: Update GitHub Secrets if Changed
        if: env.b_dev_has_changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          set -e
          echo "Updating GitHub Secrets..."
          gh auth status
          for file in merged_secrets_*.txt; do
            while IFS="=" read -r key value; do
              if [[ -n "$key" && -n "$value" ]]; then
                echo "Setting GitHub Secret: $key"
                gh secret set "$key" --body "$value"
              fi
            done < "$file"
          done